{"version":3,"sources":["redux/search/search.reducer.js","redux/search/search.types.js","config/filter-emoji.js","redux/emoji/emoji.reducer.js","redux/emoji/emoji.types.js","redux/root-reducer.js","redux/store.js","components/Header/header.styles.js","components/Header/header.component.jsx","redux/search/search.selectors.js","components/Search-Input/search-input.styles.js","components/Search-Input/search-input.component.jsx","redux/search/search.actions.js","redux/emoji/emoji.actions.js","redux/emoji/emoji.selectors.js","components/Emoji-Results-Row/emoji-results-row.styles.js","components/Emoji-Results-Row/emoji-results-row.component.jsx","components/Emoji-Results/emoji-results.styles.js","components/Emoji-Results/emoji-results.component.jsx","containers/app/app.component.jsx","utils/global-styles.js","config/root.jsx","index.jsx"],"names":["INITIAL_STATE","input","searchReducer","state","type","reducer","filterEmoji","searchText","maxResults","emojiList","filter","emoji","title","toLowerCase","includes","keywords","slice","emojiReducer","rootReducer","combineReducers","search","enhancer","compose","applyMiddleware","store","createStore","HeaderContainer","styled","div","Header","selectSearchInput","createSelector","SearchInputContainer","Container","Input","mapStateToProps","createStructuredSelector","searchInput","connect","onSearchChange","autoComplete","value","onChange","e","target","selectEmojiList","EmojiResultRowContainer","Image","img","Title","span","Info","EmojiReultsRow","symbol","codePointHex","codePointAt","toString","src","className","data-clipboard-text","alt","EmojiResultsContainer","useEffect","clipboard","Clipboard","destroy","map","key","App","GlobalStyle","createGlobalStyle","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b5c3f57.chunk.js","sourcesContent":["// Import - Types\nimport { ON_SEARCH_CHANGE } from './search.types';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst INITIAL_STATE = {\n  input: '',\n};\n\nconst searchReducer = (state = INITIAL_STATE, { type, input }) => {\n  const reducer = {\n    [ON_SEARCH_CHANGE]: {\n      ...state,\n      input,\n    },\n  };\n\n  return reducer[type] || state;\n};\n\n// Export\nexport default searchReducer;\n","export const ON_SEARCH_CHANGE = 'ON_SEARCH_CHANGE';\n","// Import - Emoji List\nimport emojiList from 'utils/emoji-list.json';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst filterEmoji = (searchText, maxResults) =>\n  emojiList\n    .filter(emoji => {\n      if (emoji.title.toLowerCase().includes(searchText.toLowerCase())) {\n        return true;\n      }\n\n      if (emoji.keywords.includes(searchText)) {\n        return true;\n      }\n\n      return false;\n    })\n    .slice(0, maxResults);\n\n// Export\nexport default filterEmoji;\n","// Import - Types\nimport { FILTER_EMOJI } from './emoji.types';\n\n// Import - Emoji\nimport filterEmoji from 'config/filter-emoji';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst INITIAL_STATE = { emojiList: filterEmoji('', 20) };\n\nconst emojiReducer = (state = INITIAL_STATE, { type, input = '' }) => {\n  const reducer = {\n    [FILTER_EMOJI]: {\n      ...state,\n      emojiList: filterEmoji(input, 20),\n    },\n  };\n\n  return reducer[type] || state;\n};\n\n// Export\nexport default emojiReducer;\n","export const FILTER_EMOJI = 'FILTER_EMOJI';\n","// Import - Redux\nimport { combineReducers } from 'redux';\n\n// Import - Reducers\nimport searchReducer from 'redux/search/search.reducer';\nimport emojiReducer from 'redux/emoji/emoji.reducer';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst rootReducer = combineReducers({\n  search: searchReducer,\n  emoji: emojiReducer,\n});\n\n// Export\nexport default rootReducer;\n","// Import - Redux\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Import - Root Reducer\nimport rootReducer from 'redux/root-reducer';\n\n// ----------------------------------------------------------------------------------------- //\n\n// List of middlewares\nconst middlewares = [];\n\n// Add Redux DevTools Extension\nconst enhancer =\n  process.env.NODE_ENV === 'development'\n    ? composeWithDevTools(applyMiddleware(...middlewares))\n    : compose(applyMiddleware(...middlewares));\n\n// Create Redux Store\nconst store = createStore(rootReducer, enhancer);\n\n// Export\nexport default store;\n","// Import - Styled Compoents\nimport styled from 'styled-components';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const HeaderContainer = styled.div`\n  padding: 15px;\n  position: relative;\n  font-weight: normal;\n  font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 32px;\n  letter-spacing: 4px;\n  text-align: center;\n  color: #333;\n`;\n","// Import - Core\nimport React from 'react';\n\n// Import - Styles\nimport { HeaderContainer } from './header.styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst Header = () => <HeaderContainer>Emoji Search</HeaderContainer>;\n\n// Export\nexport default Header;\n","// Import - Reselect\nimport { createSelector } from 'reselect';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst selectSearch = state => state.search;\n\nexport const selectSearchInput = createSelector([selectSearch], search => search.input);\n","// Import\nimport styled from 'styled-components';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const SearchInputContainer = styled.div`\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const Container = styled.div`\n  margin: 0 10px 10px 10px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  border: 1px solid #bbb;\n  box-sizing: border-box;\n  font-size: 18px;\n  padding: 10px 8px;\n  width: 100%;\n`;\n","// Import\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Import - Redux\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectSearchInput } from 'redux/search/search.selectors';\nimport { onSearchChange } from 'redux/search/search.actions';\nimport { filterEmoji } from 'redux/emoji/emoji.actions';\n\n// Import - Styles\nimport { SearchInputContainer, Container, Input } from './search-input.styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst SearchInput = ({ searchInput, onSearchChange, filterEmoji }) => {\n  const onChange = e => {\n    const input = e.target.value;\n\n    onSearchChange(input);\n    filterEmoji(input);\n  };\n\n  return (\n    <SearchInputContainer>\n      <Container>\n        <Input type=\"text\" autoComplete=\"off\" value={searchInput} onChange={onChange} />\n      </Container>\n    </SearchInputContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  searchInput: selectSearchInput,\n});\n\nSearchInput.propTypes = {\n  searchInput: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  filterEmoji: PropTypes.func,\n};\n\n// Export\nexport default connect(mapStateToProps, { onSearchChange, filterEmoji })(SearchInput);\n","// Import - Types\nimport { ON_SEARCH_CHANGE } from './search.types';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const onSearchChange = input => ({\n  type: ON_SEARCH_CHANGE,\n  input,\n});\n","// Import - Types\nimport { FILTER_EMOJI } from './emoji.types';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const filterEmoji = input => ({\n  type: FILTER_EMOJI,\n  input,\n});\n","// Import\nimport { createSelector } from 'reselect';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst selectEmoji = state => state.emoji;\n\nexport const selectEmojiList = createSelector([selectEmoji], emoji => emoji.emojiList);\n","// Import\nimport styled from 'styled-components';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const EmojiResultRowContainer = styled.div`\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n  height: 32px;\n  position: relative;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #eee;\n\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nexport const Image = styled.img`\n  width: 32px;\n  height: 32px;\n  padding-right: 10px;\n`;\n\nexport const Title = styled.span`\n  position: relative;\n  top: -8px;\n`;\n\nexport const Info = styled.span`\n  float: right;\n  position: relative;\n  top: 8px;\n  right: 10px;\n  color: #ccc;\n  display: none;\n`;\n","// Import\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Import - Styles\nimport { EmojiResultRowContainer, Image, Title, Info } from './emoji-results-row.styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst EmojiReultsRow = ({ title, symbol }) => {\n  const codePointHex = symbol.codePointAt(0).toString(16);\n  const src = `//cdn.jsdelivr.net/emojione/assets/png/${codePointHex}.png`;\n\n  return (\n    <EmojiResultRowContainer className=\"copy-to-clipboard\" data-clipboard-text={symbol}>\n      <Image alt={title} src={src} />\n      <Title className=\"title\">{title}</Title>\n      <Info className=\"info\">Click to copy emoji</Info>\n    </EmojiResultRowContainer>\n  );\n};\n\nEmojiReultsRow.propTypes = {\n  title: PropTypes.string,\n  symbol: PropTypes.string,\n};\n\n// Export\nexport default EmojiReultsRow;\n","// Import - Styled Components\nimport styled from 'styled-components';\n\n// ----------------------------------------------------------------------------------------- //\n\nexport const EmojiResultsContainer = styled.div``;\n","// Import\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Import - Clipboard\nimport Clipboard from 'clipboard';\n\n// Import - Redux\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectEmojiList } from 'redux/emoji/emoji.selectors';\n\n// Import - Components\nimport EmojiResultsRow from 'components/Emoji-Results-Row/emoji-results-row.component';\n\n// Import - Styles\nimport { EmojiResultsContainer } from './emoji-results.styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst EmojiResults = ({ emojiList }) => {\n  useEffect(() => {\n    const clipboard = new Clipboard('.copy-to-clipboard');\n\n    return () => {\n      clipboard.destroy();\n    };\n  }, []);\n\n  return (\n    <EmojiResultsContainer>\n      {emojiList.map(emoji => (\n        <EmojiResultsRow key={emoji.title} title={emoji.title} symbol={emoji.symbol} />\n      ))}\n    </EmojiResultsContainer>\n  );\n};\n\nconst mapStateToProps = createStructuredSelector({\n  emojiList: selectEmojiList,\n});\n\nEmojiResults.propTypes = {\n  emojiList: PropTypes.array,\n};\n\n// Export\nexport default connect(mapStateToProps)(EmojiResults);\n","// Import - Core\nimport React from 'react';\n\n// Import - Components\nimport Header from 'components/Header/header.component';\nimport SearchInput from 'components/Search-Input/search-input.component';\nimport EmojiResults from 'components/Emoji-Results/emoji-results.component';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst App = () => (\n  <div>\n    <Header />\n    <SearchInput />\n    <EmojiResults />\n  </div>\n);\n\n// Export\nexport default App;\n","// Import - Styled Components\nimport { createGlobalStyle } from 'styled-components';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  a {\n    text-decoration: none;\n    color: black;\n  }\n`;\n\n// Export\nexport default GlobalStyle;\n","// Import - Core\nimport React from 'react';\n\n// Import - Redux\nimport { Provider } from 'react-redux';\nimport store from 'redux/store';\n\n// Import - Router\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n// Import - Containers\nimport App from 'containers/app/app.component';\n\n// Import - Styles\nimport GlobalStyles from 'utils/global-styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst Root = () => (\n  <Provider store={store}>\n    <GlobalStyles />\n\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\n// Export\nexport default Root;\n","// Import - Core\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Import - Config\nimport Root from 'config/root';\n\n// ----------------------------------------------------------------------------------------- //\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}